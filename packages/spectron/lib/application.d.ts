export = Application;
declare function Application(options?: {}): void;
declare class Application {
    constructor(options?: {});
    host: any;
    port: number;
    quitTimeout: number;
    startTimeout: number;
    waitTimeout: number;
    connectionRetryCount: number;
    connectionRetryTimeout: number;
    nodePath: any;
    path: any;
    args: any;
    chromeDriverArgs: any;
    env: any;
    workingDirectory: any;
    debuggerAddress: any;
    chromeDriverLogPath: any;
    webdriverLogPath: any;
    webdriverOptions: any;
    start(): Promise<Application>;
    stop(): Promise<Application>;
    running: boolean;
    restart(): Promise<Application>;
    isRunning(): boolean;
    getSettings(): {
        host: any;
        port: number;
        quitTimeout: number;
        startTimeout: number;
        waitTimeout: number;
        connectionRetryCount: number;
        connectionRetryTimeout: number;
        nodePath: any;
        path: any;
        args: any;
        chromeDriverArgs: any;
        env: any;
        workingDirectory: any;
        debuggerAddress: any;
        chromeDriverLogPath: any;
        webdriverLogPath: any;
        webdriverOptions: any;
    };
    exists(): Promise<void>;
    startChromeDriver(): Promise<void>;
    chromeDriver: ChromeDriver;
    createClient(): Promise<WebDriver.BrowserObject>;
    addCommands(): void;
}
import ChromeDriver = require("./chrome-driver");
import WebDriver = require("webdriverio");
